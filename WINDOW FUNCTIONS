
--------------------------------------------------------------------------------------------
first_value >> can be replaced by `<= all (select .. from .. where a.id = b.id)`
last_value
--------------------------------------------------------------------------------------------

-- the employees who have the lowest salary in each department
-- lowest >> first_value
-- each department >> join table and return name

select 
	distinct d.department_name
  , e.salary
	, first_value(concat(first_name,' ', last_name)) over (
		partition by e.department_id 
        order by salary
	) as lowest_emp
from employees e
inner join departments d
on e.department_id = d.department_id;

-- last value vs first value >> last value should be followed by `frame` clause bc range starts from first row to the current row.
SELECT
    first_name,
    last_name,
    department_name,
    salary,
    LAST_VALUE (CONCAT(first_name,' ',last_name)) OVER (
        PARTITION BY department_name
        ORDER BY salary
        RANGE BETWEEN UNBOUNDED PRECEDING AND 
        UNBOUNDED FOLLOWING
    ) highest_salary
FROM
    employees e
    INNER JOIN departments d 
        ON d.department_id = e.department_id;



--------------------------------------------------------------------------------------------
# lag and lead
-- lag: previous value
-- lead: next value
--------------------------------------------------------------------------------------------


-- previous salary
select *, lag(salary) over (partition by employee_id order by fiscal_year) as previous_salary
from basic_pays;
-- YoY salary increment
select employee_id, fiscal_year, salary, previous_salary, concat( round((salary-previous_salary)/previous_salary, 2) * 100, '%') as YoY
from (
    select *
		, lag(salary) over (
			partition by employee_id 
			order by fiscal_year) as previous_salary
	from basic_pays) t;

-- next hire date
use wind_function;
select * from employees;
select 
	employee_id
    , first_name
    , last_name
    , hire_date
    , lead(hire_date) over (
		order by hire_date) as next_hire_date
from employees;

select 
	employee_id
    , first_name
    , last_name
    , department_name
    , hire_date
    , lead(hire_date, 1, 'N/A') over (
		partition by d.department_name
		order by hire_date) as next_hire_date
from employees e
inner join departments d
on d.department_id = e.department_id;



