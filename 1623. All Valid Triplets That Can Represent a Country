Table: SchoolA

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| student_id    | int     |
| student_name  | varchar |
+---------------+---------+
student_id is the primary key for this table.
Each row of this table contains the name and the id of a student in school A.
All student_name are distinct.
 

Table: SchoolB

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| student_id    | int     |
| student_name  | varchar |
+---------------+---------+
student_id is the primary key for this table.
Each row of this table contains the name and the id of a student in school B.
All student_name are distinct.
 

Table: SchoolC

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| student_id    | int     |
| student_name  | varchar |
+---------------+---------+
student_id is the primary key for this table.
Each row of this table contains the name and the id of a student in school C.
All student_name are distinct.
 

There is a country with three schools, where each student is enrolled in exactly one school. The country is joining a competition and wants to select one student from each school to represent the country such that:

member_A is selected from SchoolA,
member_B is selected from SchoolB,
member_C is selected from SchoolC, and
The selected students' names and IDs are pairwise distinct (i.e. no two students share the same name, and no two students share the same ID).
Write an SQL query to find all the possible triplets representing the country under the given constraints.

Return the result table in any order.

The query result format is in the following example.

 

SchoolA table:
+------------+--------------+
| student_id | student_name |
+------------+--------------+
| 1          | Alice        |
| 2          | Bob          |
+------------+--------------+

SchoolB table:
+------------+--------------+
| student_id | student_name |
+------------+--------------+
| 3          | Tom          |
+------------+--------------+

SchoolC table:
+------------+--------------+
| student_id | student_name |
+------------+--------------+
| 3          | Tom          |
| 2          | Jerry        |
| 10         | Alice        |
+------------+--------------+

Result table:
+----------+----------+----------+
| member_A | member_B | member_C |
+----------+----------+----------+
| Alice    | Tom      | Jerry    |
| Bob      | Tom      | Alice    |
+----------+----------+----------+
Let us see all the possible triplets.
- (Alice, Tom, Tom) --> Rejected because member_B and member_C have the same name and the same ID.
- (Alice, Tom, Jerry) --> Valid triplet.
- (Alice, Tom, Alice) --> Rejected because member_A and member_C have the same name.
- (Bob, Tom, Tom) --> Rejected because member_B and member_C have the same name and the same ID.
- (Bob, Tom, Jerry) --> Rejected because member_A and member_C have the same ID.
- (Bob, Tom, Alice) --> Valid triplet.


---------------------------------------
SOLUTION
---------------------------------------
** METHOD #1

SELECT 
    a.student_name as member_A 
    , b.student_name as member_B 
    , c.student_name as member_C 
FROM SchoolA a, SchoolB b, SchoolC c
WHERE a.student_name != b.student_name
AND b.student_name != c.student_name
AND a.student_name != c.student_name
AND a.student_id != b.student_id
AND b.student_id != c.student_id
AND a.student_id != c.student_id


** METHOD #2
SELECT a.student_name AS member_A, b.student_name AS member_B, c.student_name AS member_C
FROM SchoolA a 
JOIN (SchoolB b, SchoolC c)
ON (
    a.student_name <> b.student_name 
    AND a.student_id <> b.student_id
    AND a.student_name <> c.student_name 
    AND a.student_id <> c.student_id 
    AND b.student_name <> c.student_name 
    AND b.student_id <> c.student_id
);


---------------------------------------
SQL FOR CREATING TABLES
---------------------------------------
Create table If Not Exists SchoolA (student_id int, student_name varchar(20))
Create table If Not Exists SchoolB (student_id int, student_name varchar(20))
Create table If Not Exists SchoolC (student_id int, student_name varchar(20))
Truncate table SchoolA
insert into SchoolA (student_id, student_name) values ('1', 'Alice')
insert into SchoolA (student_id, student_name) values ('2', 'Bob')
Truncate table SchoolB
insert into SchoolB (student_id, student_name) values ('3', 'Tom')
Truncate table SchoolC
insert into SchoolC (student_id, student_name) values ('3', 'Tom')
insert into SchoolC (student_id, student_name) values ('2', 'Jerry')
insert into SchoolC (student_id, student_name) values ('10', 'Alice')


--------------------------------------------------
NOTE: DIFFERENCE BETWEEN: comma, join, cross join
--------------------------------------------------
https://blog.csdn.net/weixin_41013322/article/details/106620217
## 在MySQL中，JOIN、CROSS JOIN和INNER JOIN三者在句法上是等价的（可互相替换）；但是在标准的SQL中，他们不相等！因为使用INNER JOIN后面要跟着ON+查询条件，否则就要使用CROSS JOIN
## 三者共同点：
## 1. 都是进行的内联；
## 2. 无连接条件情况下(ON)查询，单独使用其中某一个其实并无差别。
## 三者不同点：
## 1. 一般情况，INNER JOIN /JOIN 要搭配ON 一起使用；CROSS JOIN 、逗号则搭配WHERE条件查询。
## 2. 有连接条件的情况下查询，使用INNER JOIN /JOIN /CROSS JOIN 的效率会优于逗号连接。
## 2. 混合多表连接的时候，逗号的运算优先级低于CROSS JOIN和INNER JOIN


** EXAMPLE: comma = cross join = join = inner join WITHOUT JOINING CONDITIONS --> `ON`
SELECT * FROM CUSTOMERS, ORDERS; >> 30 rows return
SELECT * FROM CUSTOMERS;         >> 3 rows return
SELECT * FROM ORDERS;            >> 10 rows return








